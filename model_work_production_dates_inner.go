/*
ACMI public API

A public API for ACMI's collection data including Films, TV Shows, Videogames and Art.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goacmi

import (
	"encoding/json"
)

// checks if the WorkProductionDatesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkProductionDatesInner{}

// WorkProductionDatesInner struct for WorkProductionDatesInner
type WorkProductionDatesInner struct {
	Date *string `json:"date,omitempty"`
	Notes *string `json:"notes,omitempty"`
	ToYear *string `json:"to_year,omitempty"`
}

// NewWorkProductionDatesInner instantiates a new WorkProductionDatesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkProductionDatesInner() *WorkProductionDatesInner {
	this := WorkProductionDatesInner{}
	return &this
}

// NewWorkProductionDatesInnerWithDefaults instantiates a new WorkProductionDatesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkProductionDatesInnerWithDefaults() *WorkProductionDatesInner {
	this := WorkProductionDatesInner{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *WorkProductionDatesInner) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkProductionDatesInner) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *WorkProductionDatesInner) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *WorkProductionDatesInner) SetDate(v string) {
	o.Date = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *WorkProductionDatesInner) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkProductionDatesInner) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *WorkProductionDatesInner) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *WorkProductionDatesInner) SetNotes(v string) {
	o.Notes = &v
}

// GetToYear returns the ToYear field value if set, zero value otherwise.
func (o *WorkProductionDatesInner) GetToYear() string {
	if o == nil || IsNil(o.ToYear) {
		var ret string
		return ret
	}
	return *o.ToYear
}

// GetToYearOk returns a tuple with the ToYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkProductionDatesInner) GetToYearOk() (*string, bool) {
	if o == nil || IsNil(o.ToYear) {
		return nil, false
	}
	return o.ToYear, true
}

// HasToYear returns a boolean if a field has been set.
func (o *WorkProductionDatesInner) HasToYear() bool {
	if o != nil && !IsNil(o.ToYear) {
		return true
	}

	return false
}

// SetToYear gets a reference to the given string and assigns it to the ToYear field.
func (o *WorkProductionDatesInner) SetToYear(v string) {
	o.ToYear = &v
}

func (o WorkProductionDatesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkProductionDatesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.ToYear) {
		toSerialize["to_year"] = o.ToYear
	}
	return toSerialize, nil
}

type NullableWorkProductionDatesInner struct {
	value *WorkProductionDatesInner
	isSet bool
}

func (v NullableWorkProductionDatesInner) Get() *WorkProductionDatesInner {
	return v.value
}

func (v *NullableWorkProductionDatesInner) Set(val *WorkProductionDatesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkProductionDatesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkProductionDatesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkProductionDatesInner(val *WorkProductionDatesInner) *NullableWorkProductionDatesInner {
	return &NullableWorkProductionDatesInner{value: val, isSet: true}
}

func (v NullableWorkProductionDatesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkProductionDatesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


