/*
ACMI public API

A public API for ACMI's collection data including Films, TV Shows, Videogames and Art.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goacmi

import (
	"encoding/json"
)

// checks if the WorkProductionPlacesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkProductionPlacesInner{}

// WorkProductionPlacesInner struct for WorkProductionPlacesInner
type WorkProductionPlacesInner struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// NewWorkProductionPlacesInner instantiates a new WorkProductionPlacesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkProductionPlacesInner() *WorkProductionPlacesInner {
	this := WorkProductionPlacesInner{}
	return &this
}

// NewWorkProductionPlacesInnerWithDefaults instantiates a new WorkProductionPlacesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkProductionPlacesInnerWithDefaults() *WorkProductionPlacesInner {
	this := WorkProductionPlacesInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkProductionPlacesInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkProductionPlacesInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkProductionPlacesInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *WorkProductionPlacesInner) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkProductionPlacesInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkProductionPlacesInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkProductionPlacesInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkProductionPlacesInner) SetName(v string) {
	o.Name = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *WorkProductionPlacesInner) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkProductionPlacesInner) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *WorkProductionPlacesInner) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *WorkProductionPlacesInner) SetSlug(v string) {
	o.Slug = &v
}

func (o WorkProductionPlacesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkProductionPlacesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	return toSerialize, nil
}

type NullableWorkProductionPlacesInner struct {
	value *WorkProductionPlacesInner
	isSet bool
}

func (v NullableWorkProductionPlacesInner) Get() *WorkProductionPlacesInner {
	return v.value
}

func (v *NullableWorkProductionPlacesInner) Set(val *WorkProductionPlacesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkProductionPlacesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkProductionPlacesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkProductionPlacesInner(val *WorkProductionPlacesInner) *NullableWorkProductionPlacesInner {
	return &NullableWorkProductionPlacesInner{value: val, isSet: true}
}

func (v NullableWorkProductionPlacesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkProductionPlacesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


